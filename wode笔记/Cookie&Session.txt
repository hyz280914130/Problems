		知识总结

1、会话
	0）http是无状态协议：客户端发起一次请求，服务器端接收请求并响应，就代表一次连接完成，这个过程不记录信息。而会话是为了帮助记录信息而存在。
	1）会话是干嘛的：会话技术是帮助服务器记住客户端状态（区分客户端）
	2）会话简介：
		（1）会话的生命周期：从打开一个浏览器访问某个站点，到关闭这个浏览器的整个过程，成为一次会话
		（2）会话又分为Cookie和Session。
			Cookie：数据存储在客户端本地，减少了服务器端的存储压力，但安全性不好。
			Session：将数据存储到服务器端，安全性能较好，但增加了服务器的压力

2.Cookie的创建和发送：首先Cookie默认不支持中文编码，使用URLEncoder.encode、URLdecoder.decoder编码和解码cookie的内容。
	1）创建：Cookie cookie = new Cookie(String name,String value);
	2）发送：response.addCookie(cookie);
	客户端第一次访问服务器，服务器会给这个客户端创建一个Cookie，并通过响应发送给客户端，初次访问的抓包在请求头中是看不到Cookie的（Cookie的头是name=value这种形式），需要再次刷新才能看到（第二次访问），还有就是当客户端访问服务器上的其他资源时也会在请求头中带上Cookie
	3）获得cookie
		Cookie[] cookies = request.getCookies()
		cookie.getName();
		cookie.getValue();
	4）Cookie生命周期：默认是会话级别的，也就是说Cookie默认的存在的时间是打开浏览器访问-->关闭浏览器。可以通过API改变Cookie的生命周期，变成持久级别，此时Cookie不能存于内存了，而是存在硬盘中。
	5）cookie不是一个域。

3.Cookie的API:
	（1）设置Cookie持久化：
		cookie.setMaxAge(int seconds)---时间秒，设置之后响应头中会带有时间
	（2）设置Cookie的携带路径：上面说了当客户端访问服务器上的其他资源时都会在请求头中带上Cookie，所以有时需要设置它访问那些资源时才携带
		cookie.setPath("/Study_Cookie&Session"):代表访问Study_Cookie&Session应用中的任何资源都携带cookie
		cookie.setPath("/")代表访问服务器的所有资源都携带
	     如果不设置携带路径，它默认的范围为第一次产生这个Cookie资源的同级目录。
	（3）删除Cookie：创建一个同名的、携带路径相同的cookie，然后设置存在时间为0，需要注意同名不是值对象同名，而是name相同。

3.Session技术：
	（1）Session的创建和执行过程：当客户第一次访问Servlet1时，Servlet1会给这个用户开辟一个Session空间，并且给空间一个编号，然后Servlet1会把这个编号返回给客户端，当客户访问Servlet2时会带上这个编号，然后Servlet2就知道是那个用户在访问，之后调用相应用户的Session空间
	（2）session技术是基于cookie技术的，因为session要借助cookie来存储session编号-----JSESSIONID。但是发送编号和寻找session区域的操作是客户端和服务器自动完成的，不需要手动编码。
	（3）session是目前学到的第三个域，分别是servletContext、request、session
	（4）不同的客户端访问同一个Servlet创建的session不一样(比如谷歌和火狐)
	（5）如果获取不到JSESSIONID，则会创建一个新的session域，导致这样的原因可能是清除了cookie
	（6）默认再一次会话中任何资源公用一个session对象

4.Session的API：
	（1）创建属于该客户端的私有session区域
		HttpSession session = request.getSession;这个方法会判断服务器是否有session,没有就创建，有就获取该session的引用返回给用户（实质就是根据JSESSIONID判断服务器是否有session）
		String id = session.getId();
	（2）域对象都由三个方法，session也不例外
		session.setAttribute(String name,Object obj);
		session.getAttribute(String name); --- 获得的是值，也就是obj
		session.removeAttribute(String name);

5.Session对象的生命周期：
	创建：客户端访问服务器，服务器第一次执行request.getSession()时创建
	销毁：
		（1）服务器关闭（包括非正常关闭）
		（2）session过期（默认30分钟）
			何时开始计算30分钟？--- 从不操作服务器端资源开始计时
			这个时间也可以在工程的web.xml中配置
			<session-config>
				<session-timeout>10<session-timeout>
			<session-config>
		（3）手动销毁session
			session.invalidate();
		




			实例总结
1.cookie:





			其他

1.为什么会有session域
	举个例子，你想要保存用户在网站的购物信息，这些东西明显是不希望其他用户获取的。假如使用request域，request域的生命周期是一次请求，那么就是说假如你添加了某一件商品，然后当你点击查看其他商品时，之前添加到购物车里的内容就销毁了，明显不符合我们的需求，所以使用session域，一次会话结束之后才销毁（并不是很满意这个答案）

2.网站可以使用cookie记录用户的意愿。对于简单的设置，网站可以直接将页面的设置存储在cookie中完成定制。然而对于更复杂的定制，网站只需仅将一个惟一的标识符发送给用户，由服务器端的数据库存储每个标识符对应的页面设置。
